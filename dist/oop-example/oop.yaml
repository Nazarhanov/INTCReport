title:
  subject: Объектно-ориентированное программирование

  author:
    surname: Назарханов
    name: Алишер
    patronymic: " "

  mentor:
    surname: Карабалиев
    name: Ерлан
    patronymic: " "
    suffix: ""

  period:
    start:
      day: 17
      month: апреля
      year: 20
    end:
      day: 25
      month: апреля
      year: 20

  course: 3
  group: П1 17-09Р

  speciality:
    id: 1304000
    name: Вычислительная техника и программное обеспечение

  qualification:
    id: 1304043
    name: техник-программист

  place: ТОО «Инновационный технический колледж города Алматы»

body:
  - h1c: ВВЕДЕНИЕ
  - p: Учебная практика по дисциплине «@subject» проходила с @period.start.day @period.start.month
      по @period.end.day @period.end.month в инновационном техническом колледже города
      Алматы и направлена на практическое закрепление, углубление и
      систематизацию знаний, полученных при изучении данной дисциплины.
  - p: Используя объектное мышление, можно легко проектировать сложные системы, оперируя объектами
      и взаимодействием между ними. Это значительно облегчает разработку программы, а так же
      дальнейшей её поддержке и расширении функционала.

  - p: "ООП выполняет несколько важных задач:"
  - items:
      - Бизнес процессы и сущности на уровне кода;
      - Защита и получение только проверенных данных;
      - Данные и функции объединены в одну сущность;

  - p: "Основными задачами практики являются:"
  - items:
      - Приобрети практической опыт использование методологии ООП;
      - Приобретение и формирование умений практического опыта по дисциплине «@subject»;
      - Изучить основные принципы построения связей между классами;
      - Усовершенствовать навыки программирования на ЯП PHP;
      - Получение знаний о работе Клиент-Серверного взаимодействия;

  - h1: ОСНОВНАЯ ЧАСТЬ
  - h2: Объектно-ориентированное программирование. ООП
  - p: "Объектно-ориентированное программирование (ООП) позволяет разложить проблему на составные части,
      каждая из которых становится самостоятельным объектом. Каждый из объектов содержит свой собственный код
      и данные, которые относятся к этому объекту."
  - p: "Любая программа, написанная на языке ООП, отражает в своих данных состояние физических предметов
      либо абстрактных понятий – объектов программирования, для работы, с которыми она предназначена."
  - p: "Все данные об объекте программирования и его связях с другими объектами можно объединить в одну
      структурированную переменную. В первом приближении ее можно назвать объектом."
  - p: "С объектом связывается набор действий, иначе называемых методами. С точки зрения языка
      программирования набор действий или методов – это функции, получающие в качестве обязательного параметра
      указатель на объект и выполняющие определенные действия с данными объекта программирования. Технология
      ООП запрещает работать с объектом иначе, чем через методы, таким образом, внутренняя структура объекта
      скрыта от внешнего пользователя."
  - p: "Описание множества однотипных объектов называется классом."
  - p: "Объект – это структурированная переменная, содержащая всю информацию о некотором физическом предмете
      или реализуемом в программе понятии."
  - p: "Класс – это описание множества объектов программирования (объектов) и выполняемых над ними действий."
  - p: "Класс можно сравнить с чертежом, согласно которому создаются объекты. Обычно классы разрабатывают
      таким образом, чтобы их объекты соответствовали объектам предметной области решаемой задачи."

  - h3: Основные понятия и концепции ООП
  - p:
  - p: "Любая функция в программе представляет собой метод для объекта некоторого класса."
  - p: "Класс должен формироваться в программе естественным образом, как только в ней возникает необходимость
      описания новых объектов программирования. Каждый новый шаг в разработке алгоритма должен представлять собой
      разработку нового класса на основе уже существующих."
  - p: "Вся программа в таком виде представляет собой объект некоторого класса с единственным методом run (выполнить)."
  - p: "Программирование «от класса к классу» включает в себя ряд новых понятий. "
  - p: "Основными понятиями ООП являются:"
  - items:
      - инкапсуляция;
      - наследование;
      - полиморфизм;

  - h3: Инкапсуляция
  - p: "Инкапсуляция данных (от «капсула») – это механизм, который объединяет данные и код, манипулирующий с этими
      данными, а также защищает и то, и другое от внешнего вмешательства или неправильного использования. В ООП код и
      данные могут быть объединены вместе (в так называемый «черный ящик») при создании объекта."
  - p: "Внутри объекта коды и данные могут быть закрытыми или открытыми. Закрытые коды или данные доступны только
      для других частей того же самого объекта и, соответственно, недоступны для тех частей программы, которые существуют вне
      объекта."
  - p: "Открытые коды и данные, напротив, доступны для всех частей программы, в том числе и для других частей того же
      самого объекта."
  - p: "По умолчанию, в классе (class) данные и методы приватные (private); они могут быть прочитаны и изменены только
      классом к которому принадлежат. Уровень доступа может быть изменен при помощи соответствующих ключевых слов которые
      предоставляет PHP. "
  - p: "В PHP доступно несколько спецификаторов, и они изменяют доступ к данным следующим образом:"
  - items:
      - публичные (public) данные — доступны всем;
      - защищенные (protected) — доступны только классу и дочерним классам;
      - приватные (private) —доступны только классу которому они принадлежат.

  - h3: Наследование
  - p: "Наследование. Новый, или производный класс может быть определен на основе уже имеющегося, или базового класса."
  - p: "При этом новый класс сохраняет все свойства старого: данные объекта базового класса включаются в данные объекта
      производного, а методы базового класса могут быть вызваны для объекта производного класса, причем они будут выполняться
      над данными включенного в него объекта базового класса."
  - p: "Иначе говоря, новый класс наследует как данные старого класса, так и методы их обработки."
  - p:
      "Если объект наследует свои свойства от одного родителя, то говорят об одиночном наследовании. Если объект наследует
      данные и методы от нескольких базовых классов, то говорят о множественном наследовании."
  - p: "Пример наследования – определение структуры, отдельный член которой является ранее определенной структурой."
  - p:
      "В PHP для того чтобы унаследовать один класс от другого нужно после после указания названия класса написать extends
      и указать название того класса, от которого необходимо унаследоваться."
  - p: "Пример: class Computer extends Device"

  - h3: Полиморфизм
  - p:
      "Полиморфизм – это свойство, которое позволяет один и тот же идентификатор (одно и то же имя) использовать для решения
      двух и более схожих, но технически разных задач."
  - p:
      "Целью полиморфизма, применительно к ООП, является использование одного имени для задания действий, общих для ряда классов
      объектов. Такой полиморфизм основывается на возможности включения в данные объекта также и информации о методах их обработки
      (в виде указателей на функции)."
  - p:
      "Будучи доступным в некоторой точке программы, объект , даже при отсутствии полной информации о его типе, всегда может
      корректно вызвать свойственные ему методы."
  - p:
      "Полиморфная функция – это семейство функций с одним и тем же именем, но выполняющие различные действия в зависимости от
      условий вызова."

  - h3: Абстракции
  - p:
      "Абстракция  — в объектно-ориентированном программировании это придание объекту характеристик, которые отличают его от
      всех других объектов, четко определяя его концептуальные границы. Основная идея состоит в том, чтобы отделить способ использования
      составных объектов данных от деталей их реализации в виде более простых объектов, подобно тому, как функциональная абстракция разделяет способ использования функции и деталей её реализации в терминах более примитивных функций, таким образом, данные обрабатываются функцией высокого уровня с помощью вызова функций низкого уровня."
  - p:
      "Такой подход является основой объектно-ориентированного программирования. Это позволяет работать с объектами, не вдаваясь
      в особенности их реализации. В каждом конкретном случае применяется тот или иной подход: инкапсуляция, полиморфизм или наследование.
      Например, при необходимости обратиться к скрытым данным объекта, следует воспользоваться инкапсуляцией, создав, так называемую,
      функцию доступа или свойство."

  - h1: СПЕЦИАЛЬНАЯ ЧАСТЬ

  - h2: Постановка задачи
  - p: "Разработать веб сайт для просмотра расписание занятий. Просматривать своё расписание будут как студенты разных курсов, так и преподаватели."
  - p:
      "Также необходимо разработать страницы для администрования сайта т.е добавления новых групп и преподавателей, удаления ненужного расписания,
      изменения неактуальной информации о расписании."
  - p:
      "На данном сайте будут существовать две роли: гость и админ. Гостем будут являться неавторизованные пользователи, которые хотят лишь просмотреть
      своё расписание т.е это студенты и преподаватели. Админом будет являться главный администратор, который управляет контентом сайта и может добавлять,
      удалять, изменять информацию о группах, преподавателях и расписании."
  - p: "Используемые технологии: HTML, CSS, SCSS, JavaScript, PHP."
  - p: "Используемые инструменты: VS Code, Live Server."

  - h2: Этапы выполнения
  - steps:
      "Первым делом начну со структуры проекта. В корневой директории проекта находится index.php файл, который является точкой входа в проект. В нём
      и описан веб сервер (Backend). Запустить его можно при помощи Apache сервера."
  - img:
      - dist/oop-example/img/special/1.png
      - Структура проекта
      - small
  - steps:
      "Также в корне проекта существуют две папки public и views. В папке public находятся все статические файлы относящиеся к фронтенду проекта т.е
      это css и js исходники. Кроме этого, css файлы написаны в формате SCSS, что позволяет объединить все css файлы в один и подключать этот файл в html
      единожды."
  - steps:
      "В папке views находятся html шаблоны сайта, которые шаблонизируются при помощи php. Папка также разделена на два раздела:
      guest и admin. Так пользователи увидят страницы соответствующие только их роли."
  - img:
      - dist/oop-example/img/special/2.png
      - Главная страница сайта
  - steps:
      "Когда пользователь переходит на главную страницу, он должен выбрать свою позицию (студент или преподаватель). Разметка этой страницы выглядит
      следующим образом:"
  - img:
      - dist/oop-example/img/special/3.png
      - HTML разметка главной страницы
  - steps:
      "Страница поделена на две секции: main и footer. Секции обернуты в соответствующие семантические тэги. Внутри main находится форма, которая
      отправляет данные формы на сервер т.е пост того, кто зашел на сайт."
  - img:
      - dist/oop-example/img/special/4.png
      - PHP код, обрабатывающий главный маршрут
  - steps:
      "После того, как форма была отправлена на сервере будет вызвана функция с помощью класса Router, которая перенаправляет
      пользователя на соответствующую страницу (/student или /teacher)."
  - img:
      - dist/oop-example/img/special/5.png
      - Страница для студентов (/student)
  - img:
      - dist/oop-example/img/special/6.png
      - Страница для преподавателей (/teacher)
  - steps:
      'Студент для просмотра своего расписания должен сначала выбрать свой курс, а после выбрать свою группу и перейти "Далее". В то время как
      преподаватель долэен лишь выбрать себя из списка преподавателей. HTML разметка данных страниц лишь немного отличается от главной.'
  - img:
      - dist/oop-example/img/special/7.png
      - HTML разметка страницы студента
  - steps: "Для получения страницы студента, запускается функция Router::get(/student)."
  - img:
      - dist/oop-example/img/special/8.png
      - PHP код, обрабатывающий роут студента
  - steps: "После отправки формы, студент получает информацию о его расписании занятий."
  - img:
      - dist/oop-example/img/special/9.png
      - Страница с расписанием для студентов (/timetable)
  - steps:
      "На HTML разметке страниц не раз уже была написана конструкция <?php echo ...; ?>. В эти места PHP интерпретатор вставляет, которые мы
      передаем в шаблон."
  - img:
      - dist/oop-example/img/special/10.png
      - HTML разметка страницы расписания
  - img:
      - dist/oop-example/img/special/11.png
      - PHP код, обрабатывающий роут расписания
  - steps:
      "Страница авторизовации реализована только для входа в панель администратора. Для входа необходимо заполнить два обязательных поля: имя
      пользователя и пароль."
  - img:
      - dist/oop-example/img/special/12.png
      - Страница с входа в админ панель (/auth)
  - steps:
      "Разметка страницы состоит из двух input элементов, которые обернуты в элемент form. При нажатии элемент button форма отправляется и происходит
      авторизация."
  - img:
      - dist/oop-example/img/special/18.png
      - HTML разметка страницы авторизации (/auth)
  - steps:
      "После входа, админ попадает на страницу панели управления сайта. Страница визуально поделена на три части: меню, шапка и основная часть.
      В меню страницы можно полностью управлять информацией сайта."
  - img:
      - dist/oop-example/img/special/13.png
      - Страница админ панели (/admin)
  - img:
      - dist/oop-example/img/special/13.png
      - HTML разметка админ панели (/admin)
  - steps:
      'Стили данной панели администратора отличаются от обычного вида сайта для "гостей". В стилях используются новые вохможности CSS Variables,
      позволяющие быстро менять палитру цветов на сайте.'
  - img:
      - dist/oop-example/img/special/19.png
      - CSS стили админ панели (/admin)
  - steps:
      'Перейдя на страницу "Просмотр групп", мы увидим список существующих групп на сайте. Справа от их названия есть кнопка с карандашем,
      позволяющая изменить информацию об этой группе.'
  - img:
      - dist/oop-example/img/special/14.png
      - Страница просмотра групп (/admin/groups)
  - img:
      - dist/oop-example/img/special/21.png
      - HTML разметка страницы просмотра групп (/admin/groups)
  - steps:
      "Стили ниже описывают как будет выглядеть стандартное разделение сайта на секции. Также там мы обнуляем значения установленные браузером
      по умолчанию."
  - img:
      - dist/oop-example/img/special/20.png
      - CSS стили админ панели (/admin)
      - small
  - steps:
      'Перейдя на страницу "Создание групп", мы увидим поля "Курс группы" и "Название группы". Их нужно заполнить и после нажатия кнопки добавить,
      данная группа будет добавлена на сайт.'
  - img:
      - dist/oop-example/img/special/15.png
      - Страница создания группы (/admin/groups/create)
  - img:
      - dist/oop-example/img/special/22.png
      - HTML разметка страницы создания групп (/admin/groups/create)
  - steps:
      "Стили ниже описывают как будет выглядеть меню навигации по сайту. Из стилей видно что с помощью блока @keyframes мы описали нашу анимацию и
      применили её к меню с помощью свойства animation."
  - img:
      - dist/oop-example/img/special/23.png
      - CSS стили админ панели (/admin)
      - small
  - steps:
      'Перейдя на страницу "Изменения групп", мы увидим поля "Курс группы" и "Название группы". Их нужно изменить на те значения, которые нам необходимы
      и после нажатия кнопки изменить, инфа о данной группе будет изменена на сайте.'
  - img:
      - dist/oop-example/img/special/17.png
      - Страница создания группы (/admin/groups/edit)
  - img:
      - dist/oop-example/img/special/24.png
      - HTML разметка страницы создания групп (/admin/groups/edit)
  - steps: "Стили ниже описывают как будет выглядеть синяя кнопка, которая используется по всему сайту."
  - img:
      - dist/oop-example/img/special/25.png
      - CSS стили админ панели (/admin)
      - small
  - steps:
      'Перейдя на страницу "Изменения групп", мы увидим поля "Курс группы" и "Название группы". Их нужно изменить на те значения, которые нам необходимы
      и после нажатия кнопки изменить, инфа о данной группе будет изменена на сайте.'
  - img:
      - dist/oop-example/img/special/16.png
      - Страница создания группы (/admin/groups/delete)
  - img:
      - dist/oop-example/img/special/26.png
      - HTML разметка страницы создания групп (/admin/groups/delete)
  - steps: "Стили ниже описывают как будет выглядеть поле ввода информации, которая используется по всему сайту."
  - img:
      - dist/oop-example/img/special/27.png
      - CSS стили админ панели (/admin)
      - small

  - steps-end: "Страницы добавления, изменения и удаления преподавателей выглядят аналогичным образом. Таким образом
      был создан сайт с просмотром расписаний занятий удобный для каждого."

  - h1c: ЗАКЛЮЧЕНИЕ
  - p: Практика была пройдена по дисциплине «@subject». За время практики я изучил ту самую базу работы c разработкой,
      необходимую для работы над реальными задачами. Проанализировал много новой для себя информации, на практике
      применил знания и умения. Практика помогла закрепить навыки, полученные во время обучения. Преподаватель
      дал мне массу ценных советов. Я приобрел незаменимый опыт, который, несомненно, очень пригодится мне в
      дальнейшей профессиональной деятельности. На мой взгяд, разработка не так сложна как казалось ранее и
      каждый из нас может понять её, решая реальные бизнес задачи.
  - p: "Результатом прохождения практики стало:"
  - items:
      - Подробное ознакомление с разработкой по методологии ООП;
      - Получение практических навыков и умений в разработке;
      - Изучены основы HTML, JS, CSS, PHP;
      - Усвоены материал и практические задания;
      - Получены бесценные, профессиональные, практические навыки;

  - h1c: СПИСОК ЛИТЕРАТУРЫ
  - steps:
      - "Выразительный JavaScript. Современное веб-программирование М. Хавербеке (Издательство Питер, 2019 г.)"
      - "Изучаем JavaScript: руководство по созданию современных веб-сайтов. 3-е издание Э. Браун (Издательство Диалектика Альфа-книга, 2017 г."
      - "HTML5. Карманный справочник Д. Роббинс (Издательство Диалектика / Вильямс Вильямс, 2019 г."
      - "CSS. Полный справочник. Визуальное форматирование веб-страниц Э. Уэйл, Мейер Э. А. (Издательство Диалектика Диалектика / Вильямс, 2019 г."
      - "JavaScript и jQuery. Исчерпывающее руководство Макфарланд Д.С. (Издательство Эксмо, 2015 г."
      - "HTML, JavaScript, PHP и MySQL. Джентльменский набор Web-мастера / Н.А. Прохоренок, В.А. Дронов. - Москва: СПб. [и др.] : Питер, 2015. - 768 c."
      - "PHP и MySQL; НТ Пресс - М., 2016. - 569 c. Гизберт Дамашке"
      - "Разработка современных веб-приложений. Анализ предметных областей и технологий Эспозито Д. (Издательство Вильямс Альфа-книга, 2017 г."
      - "AJAX. Программирование для Интернета Бенкен Е.С. (Издательств БХВ-Петербург, 2009 г."
      - "Проектирование веб-интерфейсов Б. Скотт, Нейл Т. (Издательство Символ-Плюс Символ, 2018 г."
      - "Как устроен JavaScript Д. Крокфорд (Издательство Питер, 2019 г."
      - "JavaScript для профессиональных веб-разработчиков — Николас Закас (Издательство: Питер, 2015 г."
